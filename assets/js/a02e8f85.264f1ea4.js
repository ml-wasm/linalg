(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[959],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(n),h=r,g=m["".concat(c,".").concat(h)]||m[h]||p[h]||a;return n?o.createElement(g,s(s({ref:t},d),{},{components:n})):o.createElement(g,s({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},790:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return m}});var o=n(2122),r=n(9756),a=(n(7294),n(3905)),s=["components"],i={title:"IntegersVector"},c=void 0,l={unversionedId:"Vectors/IntegersVector",id:"Vectors/IntegersVector",isDocsHomePage:!1,title:"IntegersVector",description:"IntegersVector is an one dimensional array or a vector of 32-bit integers.",source:"@site/docs/02-Vectors/02-IntegersVector.md",sourceDirName:"02-Vectors",slug:"/Vectors/IntegersVector",permalink:"/arrays.wasm/Vectors/IntegersVector",editUrl:"https://github.com/ArchitBhonsle/arrays.wasm/edit/master/docs/docs/02-Vectors/02-IntegersVector.md",version:"current",sidebarPosition:2,frontMatter:{title:"IntegersVector"},sidebar:"tutorialSidebar",previous:{title:"Vectors",permalink:"/arrays.wasm/Vectors/index"},next:{title:"FloatsVector",permalink:"/arrays.wasm/Vectors/FloatsVector"}},d=[{value:"Constructors Methods",id:"constructors-methods",children:[]},{value:"Interop Methods",id:"interop-methods",children:[]},{value:"Utility Methods",id:"utility-methods",children:[]},{value:"Iteration Methods",id:"iteration-methods",children:[]},{value:"Math Methods",id:"math-methods",children:[]},{value:"Statistical Methods",id:"statistical-methods",children:[]},{value:"Random Methods",id:"random-methods",children:[]}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"IntegersVector is an one dimensional array or a vector of 32-bit integers."),(0,a.kt)("p",null,"The following scripts assume that you have imported the ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegersVector")," object\nfrom the package and set up the threads as explained in ",(0,a.kt)("a",{parentName:"p",href:"../"},"getting started"),"."),(0,a.kt)("h2",{id:"constructors-methods"},"Constructors Methods"),(0,a.kt)("p",null,"These methods are used to create new ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegersVector"),"s."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Random constructors are in the ",(0,a.kt)("a",{parentName:"p",href:"#random-methods"},"random section"),"."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Create an IntegersVector from a given JavaScript array\nconst a = new IntegersVector([1, 2, 3, 4, 5]);\nconsole.log(a.data); // [1, 2, 3, 4, 5]\n\n// Create an IntegersVector filled with zeros of the specified length\nconst b = IntegersVector.newWithZeros(5);\nconsole.log(b.data); // [0, 0, 0, 0, 0]\n\n// Create an IntegersVector filled with ones of the specified length\nconst c = IntegersVector.newWithOnes(5);\nconsole.log(c.data); // [1, 1, 1, 1, 1]\n\n// Create an IntegersVector filled with given element of the specified length\nconst d = IntegersVector.newWithElement(5, 2);\nconsole.log(d.data); // [2, 2, 2, 2, 2]\n\n// Create an IntegersVector of specified length calling the given function\n// without any parameters at every element\nconst e = IntegersVector.newWithSimpleFunc(5, () =>\n  Math.floor(Math.random() * 10)\n);\nconsole.log(e.data); // [5, 2, 3, 8, 1]\n\n// Create an IntegersVector of specified length calling the given function with\n// the index as the only parameter for every element\nconst f = IntegersVector.newWithFunc(5, i => i * i);\nconsole.log(f.data); // [0, 1, 4, 9, 16]\n")),(0,a.kt)("h2",{id:"interop-methods"},"Interop Methods"),(0,a.kt)("p",null,"Some handy methods to work with the array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const a = new IntegersVector([1, 2, 3]);\n\n// Both toJSON and data return a JavaScript array representation of the\n// IntegersVector\nconsole.log(a.toJSON()); // [1, 2, 3]\nconsole.log(a.data); // [1, 2, 3]\n\n// This returns the data and metadata about the IntegersVector\nconsole.log(a.toString());\n// "[1, 2, 3], shape=[3], strides=[1], layout=CFcf (0xf), const ndim=1"\n\n// It returns clone of the IntegersVector\nconst b = a.clone();\nconsole.log(b.data); // [1, 2, 3]\n')),(0,a.kt)("h2",{id:"utility-methods"},"Utility Methods"),(0,a.kt)("p",null,"Basic getters and setters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const x = new IntegersVector([1, 2, 3]);\n\n// Get the length of the array\nconsole.log(x.len()); // 3\n\n// Get the shape of the array\nconsole.log(x.shape()); // [3]\n\n// Set the given value at the specified index\nx.set(1, 7);\n\n// Get the value at the specified index\nconsole.log(x.get(1)); // 7\n\n// Swap the values at the specified indices\nx.swap(0, 2);\nconsole.log(x.data); // [3, 7, 1]\n")),(0,a.kt)("p",null,"More complex methods used to manipulate the ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegersVector"),"."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'Each of these methods has two versions. The "pure" version returns the result of\nperforming the operation while the "impure" version actually changes the array.'),(0,a.kt)("p",{parentName:"div"},(0,a.kt)("inlineCode",{parentName:"p"},"append -> appended"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"extend -> extended"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"insert -> inserted"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"splice -> spliced")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const a = new IntegersVector([1, 2, 3]);\nconst b = new IntegersVector([4, 5, 6]);\n\n// Reverse the IntegersVector\nconsole.log(a.reversed().data);\n// [3, 2, 1]\n\n// Append an element to the IntegersVector\nconsole.log(a.appended(7).data);\n// [1, 2, 3, 7]\n\n// Extend the IntegersVector with another\nconsole.log(a.extended(b).data);\n// [1, 2, 3, 4, 5, 6]\n\n// Insert the given element at the specified index\nconsole.log(a.inserted(1, 7).data);\n// [1, 7, 2, 3]\n\n// Removes an element from the specified index\nconst [spliced, element] = a.spliced(1);\nconsole.log(spliced.data, element);\n// [1, 3] 2\n")),(0,a.kt)("h2",{id:"iteration-methods"},"Iteration Methods"),(0,a.kt)("p",null,"These methods allow you to perform element-wise operations on the vector."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const a = new IntegersVector([1, 2, 3]);\n\nconst b = a.map(x => x * 3); \nconsole.log(b.data); // [3, 6, 9]\n\na.forEach(x => console.log(x));\n// 1\n// 2\n// 3\n\na.transform(x => x * x);\nconsole.log(a.data); // [1, 4, 9]\n")),(0,a.kt)("h2",{id:"math-methods"},"Math Methods"),(0,a.kt)("p",null,"Methods to perform simple mathematical operations on the array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const a = new IntegersVector([1, 2, 3]);\nconst b = new IntegersVector([4, 5, 6]);\n\n// Perform element-wise addition of two IntegersVectors\nconsole.log(a.add(b).data); // [5, 7, 9]\n\n// Perform element-wise subtraction of two IntegersVectors\nconsole.log(a.sub(b).data); // [-3, -3, -3]\n\n// Perform element-wise multiplication of two IntegersVectors\nconsole.log(a.mul(b).data); // [4, 10, 18]\n\n// Perform element-wise division of two IntegersVectors\nconsole.log(b.div(a).data); // [4, 2, 2]\n\n// Return the addition or product of the IntegersVector\nconsole.log(a.sum()); // 6\nconsole.log(b.product()); // 120\n\n// Efficiently perform in-place element-wise scaled addition of two IntegersVectors\na.scaledAdd(2, b);\nconsole.log(a.data); // [9, 12, 15]\n")),(0,a.kt)("h2",{id:"statistical-methods"},"Statistical Methods"),(0,a.kt)("p",null,"Methods to perform basic statistical operations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const a = new IntegersVector([1, 2, 3]);\n\n// Return the minimum element in the array\nconsole.log(a.min()); // 1\n\n// Return the minimum element in the array\nconsole.log(a.max()); // 3\n\n// Return the mean of all the elements in the array\nconsole.log(a.mean()); // 2\n")),(0,a.kt)("h2",{id:"random-methods"},"Random Methods"),(0,a.kt)("p",null,"Methods that involve randomness."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const a = IntegersVector.newWithRandom(5);\nconsole.log(a.data);\n// [-280599903, -1829359186, 7232578, -2034069497, -1238556954]\n\nconst b = a.sample(3);\nconsole.log(b.data);\n// [-1238556954, -280599903, 7232578]\n")))}m.isMDXComponent=!0}}]);