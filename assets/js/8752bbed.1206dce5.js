(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[481],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6692:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],l={title:"StringsVector"},s=void 0,c={unversionedId:"Vectors/StringsVector",id:"Vectors/StringsVector",isDocsHomePage:!1,title:"StringsVector",description:"StringsVector is an one dimensional array or a vector of strings.",source:"@site/docs/02-Vectors/04-StringsVector.md",sourceDirName:"02-Vectors",slug:"/Vectors/StringsVector",permalink:"/linalg/Vectors/StringsVector",version:"current",sidebarPosition:4,frontMatter:{title:"StringsVector"},sidebar:"tutorialSidebar",previous:{title:"FloatsVector",permalink:"/linalg/Vectors/FloatsVector"},next:{title:"Matrices",permalink:"/linalg/Matrices/index"}},p=[{value:"Constructors Methods",id:"constructors-methods",children:[]},{value:"Interop Methods",id:"interop-methods",children:[]},{value:"Utility Methods",id:"utility-methods",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"StringsVector is an one dimensional array or a vector of strings."),(0,o.kt)("p",null,"The following scripts assume that you have imported the ",(0,o.kt)("inlineCode",{parentName:"p"},"StringsVector")," object\nfrom the package and set up the threads as explained in ",(0,o.kt)("a",{parentName:"p",href:"../"},"getting started"),"."),(0,o.kt)("h2",{id:"constructors-methods"},"Constructors Methods"),(0,o.kt)("p",null,"These methods are used to create new ",(0,o.kt)("inlineCode",{parentName:"p"},"IntegerVector"),"s."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Create an StringsVector from a given JavaScript array\nconst a = new StringsVector([\'a\', \'b\', \'c\']);\nconsole.log(a.data); // ["a", "b", "c"]\n\n// Create an StringsVector of specified length calling the given function\n// without any parameters at every element\nconst b = StringsVector.newWithSimpleFunc(5, () =>\n  \'a\'.repeat(Math.floor(Math.random() * 5))\n);\nconsole.log(b.data); // ["aaa", "", "aaaa", "", ""]\n\n// Create an StringsVector of specified length calling the given function with\n// the index as the only parameter for every element\nconst c = StringsVector.newWithFunc(5, i => \'b\'.repeat(i));\nconsole.log(c.data); // ["", "b", "bb", "bbb", "bbbb"]\n')),(0,o.kt)("h2",{id:"interop-methods"},"Interop Methods"),(0,o.kt)("p",null,"Some handy methods to work with the array."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const a = new StringsVector([\'a\', \'b\', \'c\']);\n\n// Both toJSON and data return a JavaScript array representation of the\n// StringsVector\nconsole.log(a.toJSON()); // ["a", "b", "c"]\nconsole.log(a.data); // ["a", "b", "c"]\n\n// This returns the data and metadata about the StringsVector\nconsole.log(a.toString());\n// "[1, 2, 3], shape=[3], strides=[1], layout=CFcf (0xf), const ndim=1"\n\n// It returns clone of the StringsVector\nconst b = a.clone();\nconsole.log(b.data); // ["a", "b", "c"]\n')),(0,o.kt)("h2",{id:"utility-methods"},"Utility Methods"),(0,o.kt)("p",null,"Basic getter and setters."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const x = new StringsVector(['a', 'b', 'c']);\n\n// Get the length of the array\nconsole.log(x.len()); // 3\n\n// Get the shape of the array\nconsole.log(x.shape()); // [3]\n\n// Set the given value at the specified index\nx.set(1, 'e');\n\n// Get the value at the specified index\nconsole.log(x.get(1)); // \"e\"\n\n// Swap the values at the specified indices\nx.swap(0, 2);\nconsole.log(x.data); // [\"c\", \"e\", \"a\"]\n")),(0,o.kt)("p",null,"More complex methods used to manipulate the ",(0,o.kt)("inlineCode",{parentName:"p"},"StringsVector"),'. Each of these\nmethods has two versions. The "pure" version returns the result of performing\nthe operation while the "impure" version actually changes the array.'),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Pure"),(0,o.kt)("th",{parentName:"tr",align:null},"Impure"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"reverse"),(0,o.kt)("td",{parentName:"tr",align:null},"reversed")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"append"),(0,o.kt)("td",{parentName:"tr",align:null},"appended")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"extend"),(0,o.kt)("td",{parentName:"tr",align:null},"extended")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"insert"),(0,o.kt)("td",{parentName:"tr",align:null},"inserted")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"splice"),(0,o.kt)("td",{parentName:"tr",align:null},"spliced")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const a = new StringsVector([\'a\', \'b\', \'c\']);\nconst b = new StringsVector([\'d\', \'e\', \'f\']);\n\n// Reverse the StringsVector\nconsole.log(a.reversed().data);\n// ["c", "b", "a"]\n\n// Append an element to the StringsVector\nconsole.log(a.appended(\'g\').data);\n// ["a", "b", "c", "g"]\n\n// Extend the StringsVector with another\nconsole.log(a.extended(b).data);\n// ["a", "b", "c", "d", "e", "f"]\n\n// Insert the given element at the specified index\nconsole.log(a.inserted(1, \'g\').data);\n// ["a", "g", "b", "c"]\n\n// Removes an element from the specified index\nconst [spliced, element] = a.spliced(1);\nconsole.log(spliced.data, element);\n// ["a", "c"] "b"\n')))}u.isMDXComponent=!0}}]);