(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[576],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(n),g=a,m=u["".concat(s,".").concat(g)]||u[g]||p[g]||o;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2266:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),l=["components"],i={title:"Integers1d"},s=void 0,d={unversionedId:"One Dimensional/Integers1d",id:"One Dimensional/Integers1d",isDocsHomePage:!1,title:"Integers1d",description:"Integers1d is a one dimensional array or a vector of 32-bit integers.",source:"@site/docs/02-One Dimensional/02-Integers1d.md",sourceDirName:"02-One Dimensional",slug:"/One Dimensional/Integers1d",permalink:"/linalg/One Dimensional/Integers1d",version:"current",sidebarPosition:2,frontMatter:{title:"Integers1d"},sidebar:"tutorialSidebar",previous:{title:"One Dimensional",permalink:"/linalg/One Dimensional/index"},next:{title:"Floats1d",permalink:"/linalg/One Dimensional/Floats1d"}},c=[{value:"Constructors Methods",id:"constructors-methods",children:[]},{value:"Interop Methods",id:"interop-methods",children:[]},{value:"Utility Methods",id:"utility-methods",children:[]}],p={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Integers1d is a one dimensional array or a vector of 32-bit integers."),(0,o.kt)("p",null,"The following scripts assume that you have imported the ",(0,o.kt)("inlineCode",{parentName:"p"},"Integers1d")," object from\nthe package and set up the threads as explained in ",(0,o.kt)("a",{parentName:"p",href:"../"},"getting started"),"."),(0,o.kt)("h2",{id:"constructors-methods"},"Constructors Methods"),(0,o.kt)("p",null,"These methods are used to create new ",(0,o.kt)("inlineCode",{parentName:"p"},"Integer1d"),"s."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Create an Integers1d from a given JavaScript array\nconst a = new Integers1d([1, 2, 3, 4, 5]);\nconsole.log(a.data); // [1, 2, 3, 4, 5]\n\n// Create an Integers1d filled with zeros of the specified length\nconst b = Integers1d.newWithZeros(5);\nconsole.log(b.data); // [0, 0, 0, 0, 0]\n\n// Create an Integers1d filled with ones of the specified length\nconst c = Integers1d.newWithOnes(5);\nconsole.log(c.data); // [1, 1, 1, 1, 1]\n\n// Create an Integers1d filled with given element of the specified length\nconst d = Integers1d.newWithElement(5, 2);\nconsole.log(d.data); // [2, 2, 2, 2, 2]\n\n// Create an Integers1d of specified length calling the given function without\n// any parameters at every element\nconst e = Integers1d.newWithSimpleFunc(5, () => Math.floor(Math.random() * 10));\nconsole.log(e.data); // [5, 2, 3, 8, 1]\n\n// Create an Integers1d of specified length calling the given function with the\n// index as the only parameter for every element\nconst f = Integers1d.newWithFunc(5, i => i * i);\nconsole.log(f.data); // [0, 1, 4, 9, 16]\n")),(0,o.kt)("h2",{id:"interop-methods"},"Interop Methods"),(0,o.kt)("p",null,"Some handy methods to work with the array."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const a = new Integers1d([1, 2, 3]);\n\n// Both toJSON and data return a JavaScript array representation of the Integers1d\nconsole.log(a.toJSON()); // [1, 2, 3]\nconsole.log(a.data); // [1, 2, 3]\n\n// This returns the data and metadata about the Integers1d\nconsole.log(a.toString());\n// "[1, 2, 3], shape=[3], strides=[1], layout=CFcf (0xf), const ndim=1"\n\n// It returns clone of the Integers1d\nconst b = a.clone();\nconsole.log(b.data); // [1, 2, 3]\n')),(0,o.kt)("h2",{id:"utility-methods"},"Utility Methods"),(0,o.kt)("p",null,"Basic getter and setters."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const x = new Integers1d([1, 2, 3]);\n\n// Get the length of the array\nconsole.log(x.len()); // 3\n\n// Get the shape of the array\nconsole.log(x.shape()); // [3]\n\n// Set the given value at the specified index\nx.set(1, 7);\n\n// Get the value at the specified index\nconsole.log(x.get(1)); // 7\n\n// Swap the values at the specified indices\nx.swap(0, 2);\nconsole.log(x.data); // [3, 7, 1]\n")),(0,o.kt)("p",null,"More complex methods used to manipulate the ",(0,o.kt)("inlineCode",{parentName:"p"},"Integers1d"),'. Each of these methods\nhas two versions. The "pure" version returns the result of performing the\noperation while the "impure" version actually changes the array.'),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Pure"),(0,o.kt)("th",{parentName:"tr",align:null},"Impure"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"reverse"),(0,o.kt)("td",{parentName:"tr",align:null},"reversed")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"append"),(0,o.kt)("td",{parentName:"tr",align:null},"appended")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"extend"),(0,o.kt)("td",{parentName:"tr",align:null},"extended")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"insert"),(0,o.kt)("td",{parentName:"tr",align:null},"inserted")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"splice"),(0,o.kt)("td",{parentName:"tr",align:null},"spliced")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const a = new Integers1d([1, 2, 3]);\nconst b = new Integers1d([4, 5, 6]);\n\n// Reverse the Integers1d\nconsole.log(a.reversed().data);\n// [3, 2, 1]\n\n// Append an element to the Integers1d\nconsole.log(a.appended(7).data);\n// [1, 2, 3, 7]\n\n// Extend the Integers1d with another\nconsole.log(a.extended(b).data);\n// [1, 2, 3, 4, 5, 6]\n\n// Insert the given element at the specified index\nconsole.log(a.inserted(1, 7).data);\n// [1, 7, 2, 3]\n\n// Removes an element from the specified index\nconst [spliced, element] = a.spliced(1);\nconsole.log(spliced.data, element);\n// [1, 3] 2\n")))}u.isMDXComponent=!0}}]);