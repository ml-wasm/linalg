(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[153],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=a,u=m["".concat(i,".").concat(h)]||m[h]||p[h]||r;return n?o.createElement(u,l(l({ref:t},d),{},{components:n})):o.createElement(u,l({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2042:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),l=["components"],s={title:"FloatsVector"},i=void 0,c={unversionedId:"Vectors/FloatsVector",id:"Vectors/FloatsVector",isDocsHomePage:!1,title:"FloatsVector",description:"FloatsVector is an one dimensional array or a vector of 64-bit floats.",source:"@site/docs/02-Vectors/03-FloatsVector.md",sourceDirName:"02-Vectors",slug:"/Vectors/FloatsVector",permalink:"/linalg/Vectors/FloatsVector",editUrl:"https://github.com/ml-wasm/linalg/edit/master/docs/docs/02-Vectors/03-FloatsVector.md",version:"current",sidebarPosition:3,frontMatter:{title:"FloatsVector"},sidebar:"tutorialSidebar",previous:{title:"IntegersVector",permalink:"/linalg/Vectors/IntegersVector"},next:{title:"StringsVector",permalink:"/linalg/Vectors/StringsVector"}},d=[{value:"Constructors Methods",id:"constructors-methods",children:[]},{value:"Interop Methods",id:"interop-methods",children:[]},{value:"Utility Methods",id:"utility-methods",children:[]},{value:"Iteration Methods",id:"iteration-methods",children:[]},{value:"Math Methods",id:"math-methods",children:[]},{value:"Statistical Methods",id:"statistical-methods",children:[]}],p={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"FloatsVector is an one dimensional array or a vector of 64-bit floats."),(0,r.kt)("p",null,"The following scripts assume that you have imported the ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatsVector")," object\nfrom the package and set up the threads as explained in ",(0,r.kt)("a",{parentName:"p",href:"../"},"getting started"),"."),(0,r.kt)("h2",{id:"constructors-methods"},"Constructors Methods"),(0,r.kt)("p",null,"These methods are used to create new ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatsVector"),"s."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Create a FloatsVector from a given JavaScript array\nconst a = new FloatsVector([1, 2, 3, 4, 5]);\nconsole.log(a.data); // [1, 2, 3, 4, 5]\n\n// Create a FloatsVector filled with zeros of the specified length\nconst b = FloatsVector.newWithZeros(5);\nconsole.log(b.data); // [0, 0, 0, 0, 0]\n\n// Create a FloatsVector filled with ones of the specified length\nconst c = FloatsVector.newWithOnes(5);\nconsole.log(c.data); // [1, 1, 1, 1, 1]\n\n// Create a FloatsVector filled with given element of the specified length\nconst d = FloatsVector.newWithElement(5, 2);\nconsole.log(d.data); // [2, 2, 2, 2, 2]\n\n// Create a FloatsVector of specified length calling the given function\n// without any parameters at every element\nconst e = FloatsVector.newWithSimpleFunc(3, () => Math.random() * 10);\nconsole.log(e.data); // [1.6528487232156874, 3.3231458607562137, 8.349146447113004]\n\n// Create a FloatsVector of specified length calling the given function with\n// the index as the only parameter for every element\nconst f = FloatsVector.newWithFunc(5, i => i * i);\nconsole.log(f.data); // [0, 1, 4, 9, 16]\n\n// Create a FloatsVector filled with n evenly spaced elements between two points\nconst g = FloatsVector.newWithLinspace(0, 1, 5);\nconsole.log(g.data); // [0, 0.25, 0.5, 0.75, 1]\n\n// Create a FloatsVector with elements from start to step incrementing by step\nconst h = FloatsVector.newWithRange(0, 0.75, 0.25);\nconsole.log(h.data); // [0, 0.25, 0.5]\n\n// Create a FloatsVector with n logarithmically spaced elements from base^start\n// to base^end\nconst i = FloatsVector.newWithLogspace(2, 0, 10, 5);\nconsole.log(i.data); // [2, 4, 8, 16]\n\n// Create a FloatsVector with n geometrically spaced elements from start to end\nconst j = FloatsVector.newWithGeomspace(1, 5, 3);\nconsole.log(j.data); // [1, 1.709975946676697, 2.924017738212866, 5.000000000000001]\n")),(0,r.kt)("h2",{id:"interop-methods"},"Interop Methods"),(0,r.kt)("p",null,"Some handy methods to work with the array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const a = new FloatsVector([1, 2, 3]);\n\n// Both toJSON and data return a JavaScript array representation of the\n// FloatsVector\nconsole.log(a.toJSON()); // [1, 2, 3]\nconsole.log(a.data); // [1, 2, 3]\n\n// This returns the data and metadata about the FloatsVector\nconsole.log(a.toString());\n// "[1, 2, 3], shape=[3], strides=[1], layout=CFcf (0xf), const ndim=1"\n\n// It returns clone of the FloatsVector\nconst b = a.clone();\nconsole.log(b.data); // [1, 2, 3]\n')),(0,r.kt)("h2",{id:"utility-methods"},"Utility Methods"),(0,r.kt)("p",null,"Basic getters and setters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const x = new FloatsVector([1, 2, 3]);\n\n// Get the length of the array\nconsole.log(x.len()); // 3\n\n// Get the shape of the array\nconsole.log(x.shape()); // [3]\n\n// Set the given value at the specified index\nx.set(1, 7);\n\n// Get the value at the specified index\nconsole.log(x.get(1)); // 7\n\n// Swap the values at the specified indices\nx.swap(0, 2);\nconsole.log(x.data); // [3, 7, 1]\n")),(0,r.kt)("p",null,"More complex methods used to manipulate the ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatsVector"),'. Each of these\nmethods has two versions. The "pure" version returns the result of performing\nthe operation while the "impure" version actually changes the array.'),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Pure"),(0,r.kt)("th",{parentName:"tr",align:null},"Impure"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reverse"),(0,r.kt)("td",{parentName:"tr",align:null},"reversed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"append"),(0,r.kt)("td",{parentName:"tr",align:null},"appended")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extend"),(0,r.kt)("td",{parentName:"tr",align:null},"extended")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"insert"),(0,r.kt)("td",{parentName:"tr",align:null},"inserted")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"splice"),(0,r.kt)("td",{parentName:"tr",align:null},"spliced")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const a = new FloatsVector([0.1, 0.2, 0.3]);\nconst b = new FloatsVector([0.4, 0.5, 0.6]);\n\n// Reverse the FloatsVector\nconsole.log(a.reversed().data);\n// [0.3, 0.2, 0.1]\n\n// Append an element to the FloatsVector\nconsole.log(a.appended(0.7).data);\n// [0.1, 0.2, 0.3, 0.7]\n\n// Extend the FloatsVector with another\nconsole.log(a.extended(b).data);\n// [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\n\n// Insert the given element at the specified index\nconsole.log(a.inserted(1, 0.7).data);\n// [0.1, 0.7, 0.2, 0.3]\n\n// Removes an element from the specified index\nconst [spliced, element] = a.spliced(1);\nconsole.log(spliced.data, element);\n// [0.1, 0.3] 0.2\n")),(0,r.kt)("h2",{id:"iteration-methods"},"Iteration Methods"),(0,r.kt)("p",null,"These methods allow you to perform element-wise operations on the vector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const a = new FloatsVector([0.1, 0.2, 0.3]);\n\nconst b = a.map(x => x * 3);\nconsole.log(b.data); // [0.30000000000000004, 0.6000000000000001, 0.8999999999999999]\n\na.forEach(x => console.log(x));\n// 0.1\n// 0.2\n// 0.3\n\na.transform(x => x * x);\nconsole.log(a.data); // [0.010000000000000002, 0.04000000000000001, 0.09]\n")),(0,r.kt)("h2",{id:"math-methods"},"Math Methods"),(0,r.kt)("p",null,"Methods to perform simple mathematical operations on the array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const a = new FloatsVector([0.1, 0.2, 0.3]);\nconst b = new FloatsVector([0.4, 0.5, 0.6]);\n\n// Perform element-wise addition of two FloatsVectors\nconsole.log(a.add(b).data); // [0.5, 0.7, 0.8999999999999999]\n\n// Perform element-wise subtraction of two FloatsVectors\nconsole.log(a.sub(b).data); // [-0.30000000000000004, -0.3, -0.3]\n\n// Perform element-wise multiplication of two FloatsVectors\nconsole.log(a.mul(b).data); // [0.04000000000000001, 0.1, 0.18]\n\n// Perform element-wise division of two FloatsVectors\nconsole.log(b.div(a).data); // [4, 2.5, 2]\n\n// Return the addition or product of the FloatsVector\nconsole.log(a.sum()); // 0.6000000000000001\nconsole.log(b.product()); // 0.12\n\n// Efficiently perform in-place element-wise scaled addition of two FloatsVectors\na.scaledAdd(2, b);\nconsole.log(a.data); // [0.9, 1.2, 1.5]\n")),(0,r.kt)("h2",{id:"statistical-methods"},"Statistical Methods"),(0,r.kt)("p",null,"Methods to perform basic statistical operations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const a = new FloatsVector([0.1, 0.2, 0.3]);\n\n// Return the minimum element in the array\nconsole.log(a.min()); // 0.1\n\n// Return the minimum element in the array\nconsole.log(a.max()); // 0.3\n\n// Return the mean of all the elements in the array\nconsole.log(a.mean()); // 0.20000000000000004\n\n// Return the standard deviation of the array\nconsole.log(a.std(0)); // 0.0816496580927726\n\n// Return the variance of the array\nconsole.log(a.var(1)); // 0.009999999999999997\n")))}m.isMDXComponent=!0}}]);