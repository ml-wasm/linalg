(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[481],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6692:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={title:"StringsVector"},c=void 0,l={unversionedId:"Vectors/StringsVector",id:"Vectors/StringsVector",isDocsHomePage:!1,title:"StringsVector",description:"StringsVector is an one dimensional array or a vector of strings.",source:"@site/docs/02-Vectors/04-StringsVector.md",sourceDirName:"02-Vectors",slug:"/Vectors/StringsVector",permalink:"/linalg/Vectors/StringsVector",editUrl:"https://github.com/ml-wasm/linalg/edit/master/docs/docs/02-Vectors/04-StringsVector.md",version:"current",sidebarPosition:4,frontMatter:{title:"StringsVector"},sidebar:"tutorialSidebar",previous:{title:"FloatsVector",permalink:"/linalg/Vectors/FloatsVector"},next:{title:"Matrices",permalink:"/linalg/Matrices/index"}},d=[{value:"Constructors Methods",id:"constructors-methods",children:[]},{value:"Interop Methods",id:"interop-methods",children:[]},{value:"Utility Methods",id:"utility-methods",children:[]},{value:"Iteration Methods",id:"iteration-methods",children:[]}],p={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"StringsVector is an one dimensional array or a vector of strings."),(0,a.kt)("p",null,"The following scripts assume that you have imported the ",(0,a.kt)("inlineCode",{parentName:"p"},"StringsVector")," object\nfrom the package and set up the threads as explained in ",(0,a.kt)("a",{parentName:"p",href:"../"},"getting started"),"."),(0,a.kt)("h2",{id:"constructors-methods"},"Constructors Methods"),(0,a.kt)("p",null,"These methods are used to create new ",(0,a.kt)("inlineCode",{parentName:"p"},"StringsVector"),"s."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Create an StringsVector from a given JavaScript array\nconst a = new StringsVector([\'a\', \'b\', \'c\']);\nconsole.log(a.data); // ["a", "b", "c"]\n\n// Create an StringsVector of specified length calling the given function\n// without any parameters at every element\nconst b = StringsVector.newWithSimpleFunc(5, () =>\n  \'a\'.repeat(Math.floor(Math.random() * 5))\n);\nconsole.log(b.data); // ["aaa", "", "aaaa", "", ""]\n\n// Create an StringsVector of specified length calling the given function with\n// the index as the only parameter for every element\nconst c = StringsVector.newWithFunc(5, i => \'b\'.repeat(i));\nconsole.log(c.data); // ["", "b", "bb", "bbb", "bbbb"]\n')),(0,a.kt)("h2",{id:"interop-methods"},"Interop Methods"),(0,a.kt)("p",null,"Some handy methods to work with the array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const a = new StringsVector([\'a\', \'b\', \'c\']);\n\n// Both toJSON and data return a JavaScript array representation of the\n// StringsVector\nconsole.log(a.toJSON()); // ["a", "b", "c"]\nconsole.log(a.data); // ["a", "b", "c"]\n\n// This returns the data and metadata about the StringsVector\nconsole.log(a.toString());\n// "[1, 2, 3], shape=[3], strides=[1], layout=CFcf (0xf), const ndim=1"\n\n// It returns clone of the StringsVector\nconst b = a.clone();\nconsole.log(b.data); // ["a", "b", "c"]\n')),(0,a.kt)("h2",{id:"utility-methods"},"Utility Methods"),(0,a.kt)("p",null,"Basic getters and setters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const x = new StringsVector(['a', 'b', 'c']);\n\n// Get the length of the array\nconsole.log(x.len()); // 3\n\n// Get the shape of the array\nconsole.log(x.shape()); // [3]\n\n// Set the given value at the specified index\nx.set(1, 'e');\n\n// Get the value at the specified index\nconsole.log(x.get(1)); // \"e\"\n\n// Swap the values at the specified indices\nx.swap(0, 2);\nconsole.log(x.data); // [\"c\", \"e\", \"a\"]\n")),(0,a.kt)("p",null,"More complex methods used to manipulate the ",(0,a.kt)("inlineCode",{parentName:"p"},"StringsVector"),"."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'Each of these methods has two versions. The "pure" version returns the result of\nperforming the operation while the "impure" version actually changes the array.'),(0,a.kt)("p",{parentName:"div"},(0,a.kt)("inlineCode",{parentName:"p"},"append -> appended"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"extend -> extended"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"insert -> inserted"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"splice -> spliced")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const a = new StringsVector([\'a\', \'b\', \'c\']);\nconst b = new StringsVector([\'d\', \'e\', \'f\']);\n\n// Reverse the StringsVector\nconsole.log(a.reversed().data);\n// ["c", "b", "a"]\n\n// Append an element to the StringsVector\nconsole.log(a.appended(\'g\').data);\n// ["a", "b", "c", "g"]\n\n// Extend the StringsVector with another\nconsole.log(a.extended(b).data);\n// ["a", "b", "c", "d", "e", "f"]\n\n// Insert the given element at the specified index\nconsole.log(a.inserted(1, \'g\').data);\n// ["a", "g", "b", "c"]\n\n// Removes an element from the specified index\nconst [spliced, element] = a.spliced(1);\nconsole.log(spliced.data, element);\n// ["a", "c"] "b"\n')),(0,a.kt)("h2",{id:"iteration-methods"},"Iteration Methods"),(0,a.kt)("p",null,"These methods allow you to perform element-wise operations on the vector."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const a = new StringsVector([\'a\', \'b\', \'c\']);\n\nconst b = a.map(x => x + \'x\');\nconsole.log(b.data); // ["ax", "bx", "cx"]\n\na.forEach(x => console.log(x));\n// a\n// b\n// c\n\na.transform(x => x + x);\nconsole.log(a.data); // ["aa", "bb", "cc"]\n')))}u.isMDXComponent=!0}}]);